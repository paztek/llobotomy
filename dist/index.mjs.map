{"version":3,"file":"index.mjs","sources":["../src/assistant/thread.ts"],"sourcesContent":["import EventEmitter from 'events';\nimport type OpenAI from 'openai';\nimport type { Thread as BaseThread } from 'openai/resources/beta';\nimport type { Run as BaseRun } from 'openai/resources/beta/threads';\n\nconst POLLING_INTERVAL = 1000;\n\nexport class Thread extends EventEmitter {\n    private pollingIntervalId: NodeJS.Timeout | null = null;\n\n    constructor(\n        private readonly openai: OpenAI,\n        public readonly instance: BaseThread,\n    ) {\n        super();\n    }\n\n    static async create(openai: OpenAI): Promise<Thread> {\n        const instance = await openai.beta.threads.create();\n        return new Thread(openai, instance);\n    }\n\n    async query(text: string, assistantId: string): Promise<void> {\n        await this.openai.beta.threads.messages.create(this.instance.id, {\n            role: 'user',\n            content: text,\n        });\n\n        await this.doRun(assistantId);\n    }\n\n    stop(): void {\n        // TODO Stop run if in progress\n        this.stopRunPolling();\n    }\n\n    private async doRun(assistantId: string): Promise<void> {\n        const { id: runId } = await this.openai.beta.threads.runs.create(\n            this.instance.id,\n            {\n                assistant_id: assistantId,\n            },\n        );\n\n        this.startRunPolling(runId, POLLING_INTERVAL);\n    }\n\n    private stopRunPolling(): void {\n        if (this.pollingIntervalId) {\n            clearInterval(this.pollingIntervalId);\n            this.pollingIntervalId = null;\n        }\n    }\n\n    private startRunPolling(runId: string, interval: number): void {\n        this.pollingIntervalId = setInterval(async () => {\n            const run = await this.openai.beta.threads.runs.retrieve(\n                this.instance.id,\n                runId,\n            );\n\n            switch (run.status) {\n                case 'queued': {\n                    this.emit('queued');\n                    break;\n                }\n                case 'in_progress': {\n                    this.emit('in_progress');\n                    break;\n                }\n                case 'requires_action': {\n                    if (!run.required_action) {\n                        break;\n                    }\n                    const oaiRequiredAction = run.required_action;\n                    const requiredAction = new RequiredAction(\n                        this.openai,\n                        this.instance,\n                        run,\n                        oaiRequiredAction,\n                    );\n\n                    this.stopRunPolling();\n\n                    requiredAction.once('submitted', () => {\n                        this.startRunPolling(runId, interval);\n                    });\n\n                    this.emit('requires_action', requiredAction);\n                    break;\n                }\n                case 'cancelling': {\n                    this.emit('cancelling');\n                    break;\n                }\n                case 'cancelled': {\n                    this.stopRunPolling();\n                    this.emit('cancelled');\n                    break;\n                }\n                case 'failed': {\n                    this.stopRunPolling();\n                    // TODO\n                    this.emit('failed');\n                    break;\n                }\n                case 'completed': {\n                    this.stopRunPolling();\n\n                    this.emit('completed');\n\n                    // Get the assistant's response\n                    const message = await this.getAssistantMessage();\n                    this.emit('message', message);\n\n                    break;\n                }\n                case 'expired': {\n                    this.stopRunPolling();\n                    this.emit('expired');\n                    break;\n                }\n            }\n        }, interval);\n    }\n\n    private async getAssistantMessage(): Promise<string> {\n        const messages = await this.openai.beta.threads.messages.list(\n            this.instance.id,\n        );\n\n        // Most recent message is at the beginning of the list\n        const message = messages.data[0];\n\n        if (!message || message.role !== 'assistant') {\n            throw new Error('No response from assistant');\n        }\n\n        if (!message.content[0]) {\n            throw new Error('Empty response from assistant');\n        }\n\n        if (message.content[0].type !== 'text') {\n            throw new Error('Non-text response from assistant');\n        }\n\n        return message.content[0].text.value;\n    }\n}\n\nexport class RequiredAction extends EventEmitter {\n    toolCalls: ToolCall[];\n\n    constructor(\n        private readonly openai: OpenAI,\n        private readonly thread: BaseThread,\n        private readonly run: BaseRun,\n        public instance: BaseRun.RequiredAction,\n    ) {\n        super();\n\n        if (instance.type !== 'submit_tool_outputs') {\n            throw new Error('Unsupported required action type');\n        }\n\n        this.toolCalls = instance.submit_tool_outputs.tool_calls.map(\n            (oaiToolCall) => ({\n                id: oaiToolCall.id,\n                name: oaiToolCall.function.name,\n                arguments: JSON.parse(oaiToolCall.function.arguments),\n            }),\n        );\n    }\n\n    async submitToolOutputs(toolOutputs: ToolOutput[]): Promise<void> {\n        await this.openai.beta.threads.runs.submitToolOutputs(\n            this.thread.id,\n            this.run.id,\n            {\n                tool_outputs: toolOutputs.map((toolOutput) => ({\n                    output: JSON.stringify(toolOutput.value),\n                    tool_call_id: toolOutput.callId,\n                })),\n            },\n        );\n\n        this.emit('submitted');\n    }\n}\n\nexport interface ToolCall {\n    id: string;\n    name: string;\n    arguments: Record<string, unknown>;\n}\n\nexport interface ToolOutput {\n    callId: string;\n    value: unknown;\n}\n"],"names":[],"mappings":"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"}